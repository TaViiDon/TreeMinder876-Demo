// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(CUSTODIAN)
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  plantedTrees  Tree[]
  organizations OrganizationUser[]
  
  @@map("users")
}

model Tree {
  id          String   @id @default(cuid())
  treeId      String   @unique // External tree ID like "7007876"
  species     String?
  plantedDate DateTime
  latitude    Float
  longitude   Float
  status      TreeStatus @default(HEALTHY)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  planterId   String
  planter     User     @relation(fields: [planterId], references: [id])
  
  // optional organization relation
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  images      TreeImage[]
  updates     TreeUpdate[]
  
  @@map("trees")
}

model TreeImage {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  createdAt DateTime @default(now())
  
  treeId    String
  tree      Tree     @relation(fields: [treeId], references: [id])
  
  @@map("tree_images")
}

model TreeUpdate {
  id          String   @id @default(cuid())
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  
  treeId      String
  tree        Tree     @relation(fields: [treeId], references: [id])
  
  @@map("tree_updates")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  
  // Relationships
  users       OrganizationUser[]
  trees       Tree[]
  
  @@map("organizations")
}

model OrganizationUser {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@unique([userId, organizationId])
  @@map("organization_users")
}

enum UserRole {
  SUPPLIER
  CUSTODIAN
}

enum TreeStatus {
  HEALTHY
  NEEDS_ATTENTION
  DECEASED
}

enum OrganizationRole {
  ADMIN
  MEMBER
}